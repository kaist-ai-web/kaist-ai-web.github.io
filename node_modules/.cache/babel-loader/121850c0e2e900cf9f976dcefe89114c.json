{"remainingRequest":"/Users/jeongmin/Workspace/kaist-ai-web.github.io/node_modules/babel-loader/lib/index.js!/Users/jeongmin/Workspace/kaist-ai-web.github.io/node_modules/eslint-loader/index.js??ref--13-0!/Users/jeongmin/Workspace/kaist-ai-web.github.io/src/helpers/sheets.js","dependencies":[{"path":"/Users/jeongmin/Workspace/kaist-ai-web.github.io/src/helpers/sheets.js","mtime":1613470699886},{"path":"/Users/jeongmin/Workspace/kaist-ai-web.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1613469958716},{"path":"/Users/jeongmin/Workspace/kaist-ai-web.github.io/node_modules/babel-loader/lib/index.js","mtime":1613469958647},{"path":"/Users/jeongmin/Workspace/kaist-ai-web.github.io/node_modules/eslint-loader/index.js","mtime":1613469960505}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvVXNlcnMvamVvbmdtaW4vV29ya3NwYWNlL2thaXN0LWFpLXdlYi5naXRodWIuaW8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9Vc2Vycy9qZW9uZ21pbi9Xb3Jrc3BhY2Uva2Fpc3QtYWktd2ViLmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9Vc2Vycy9qZW9uZ21pbi9Xb3Jrc3BhY2Uva2Fpc3QtYWktd2ViLmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwp2YXIgVVJMX0JBU0UgPSAnaHR0cHM6Ly9zaGVldHMuZ29vZ2xlYXBpcy5jb20vdjQvc3ByZWFkc2hlZXRzJzsKCnZhciBTaGVldHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFNoZWV0cygpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaGVldHMpOwoKICAgIHRoaXMua2V5ID0gbnVsbDsKICB9CgogIF9jcmVhdGVDbGFzcyhTaGVldHMsIFt7CiAgICBrZXk6ICJ2YWxpZGF0ZUtleSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVLZXkoKSB7CiAgICAgIGlmICh0aGlzLmtleSA9PT0gbnVsbCkgewogICAgICAgIHRocm93IEVycm9yKCdVc2Ugc2V0S2V5KGtleSkgbWV0aG9kIHRvIHNldCBBUEkga2V5IGZvciB1c2luZyBHb29nbGUgQVBJIGZpcnN0LicpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0S2V5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRLZXkoa2V5KSB7CiAgICAgIHRoaXMua2V5ID0ga2V5OwogICAgfQogIH0sIHsKICAgIGtleTogImdldENvbnRlbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRDb250ZW50ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGRvY0lkLCBzaGVldCwgcmFuZ2UpIHsKICAgICAgICB2YXIgdXJsLCByZXNwb25zZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlS2V5KCk7CiAgICAgICAgICAgICAgICB1cmwgPSAiIi5jb25jYXQoVVJMX0JBU0UsICIvIikuY29uY2F0KGRvY0lkLCAiL3ZhbHVlcy8iKS5jb25jYXQoc2hlZXQsICIhIikuY29uY2F0KHJhbmdlLCAiP2tleT0iKS5jb25jYXQodGhpcy5rZXkpOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2godXJsKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UuanNvbigpKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldENvbnRlbnQoX3gsIF94MiwgX3gzKSB7CiAgICAgICAgcmV0dXJuIF9nZXRDb250ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRDb250ZW50OwogICAgfSgpCiAgfSwgewogICAga2V5OiAiZ2V0UmFuZ2VzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0UmFuZ2VzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihkb2NJZCwgcmFuZ2VzKSB7CiAgICAgICAgdmFyIHJhbmdlUGFyYW1zLCB1cmwsIHJlc3BvbnNlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlS2V5KCk7CiAgICAgICAgICAgICAgICByYW5nZVBhcmFtcyA9IHJhbmdlcy5tYXAoZnVuY3Rpb24gKHIpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuICJyYW5nZXM9Ii5jb25jYXQoZW5jb2RlVVJJKHIpKTsKICAgICAgICAgICAgICAgIH0pLmpvaW4oJyYnKTsKICAgICAgICAgICAgICAgIHVybCA9ICIiLmNvbmNhdChVUkxfQkFTRSwgIi8iKS5jb25jYXQoZG9jSWQsICIvdmFsdWVzOmJhdGNoR2V0PyIpLmNvbmNhdChyYW5nZVBhcmFtcywgIiZrZXk9IikuY29uY2F0KHRoaXMua2V5KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaCh1cmwpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlLmpzb24oKSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldFJhbmdlcyhfeDQsIF94NSkgewogICAgICAgIHJldHVybiBfZ2V0UmFuZ2VzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRSYW5nZXM7CiAgICB9KCkKICB9XSk7CgogIHJldHVybiBTaGVldHM7Cn0oKTsKCmV4cG9ydCBkZWZhdWx0IG5ldyBTaGVldHMoKTs="},{"version":3,"sources":["/Users/jeongmin/Workspace/kaist-ai-web.github.io/src/helpers/sheets.js"],"names":["URL_BASE","Sheets","key","Error","docId","sheet","range","validateKey","url","fetch","response","json","ranges","rangeParams","map","r","encodeURI","join"],"mappings":";;;;;;;;AAAA,IAAMA,QAAQ,GAAG,+CAAjB;;IAEMC,M;AACF,oBAAc;AAAA;;AACV,SAAKC,GAAL,GAAW,IAAX;AACH;;;;kCAEa;AACV,UAAI,KAAKA,GAAL,KAAa,IAAjB,EAAuB;AACnB,cAAMC,KAAK,CAAC,mEAAD,CAAX;AACH;AACJ;;;2BAEMD,G,EAAK;AACR,WAAKA,GAAL,GAAWA,GAAX;AACH;;;;iGAEgBE,K,EAAOC,K,EAAOC,K;;;;;;AAC3B,qBAAKC,WAAL;AAEMC,gBAAAA,G,aAASR,Q,cAAYI,K,qBAAgBC,K,cAASC,K,kBAAa,KAAKJ,G;;uBAC/CO,KAAK,CAACD,GAAD,C;;;AAAtBE,gBAAAA,Q;iDACCA,QAAQ,CAACC,IAAT,E;;;;;;;;;;;;;;;;;;;iGAGKP,K,EAAOQ,M;;;;;;AACnB,qBAAKL,WAAL;AAEMM,gBAAAA,W,GAAcD,MAAM,CAACE,GAAP,CAAW,UAAAC,CAAC;AAAA,0CAAcC,SAAS,CAACD,CAAD,CAAvB;AAAA,iBAAZ,EAA0CE,IAA1C,CAA+C,GAA/C,C;AACdT,gBAAAA,G,aAASR,Q,cAAYI,K,8BAAyBS,W,kBAAmB,KAAKX,G;;uBACrDO,KAAK,CAACD,GAAD,C;;;AAAtBE,gBAAAA,Q;kDACCA,QAAQ,CAACC,IAAT,E;;;;;;;;;;;;;;;;;;;;;AAIf,eAAe,IAAIV,MAAJ,EAAf","sourcesContent":["const URL_BASE = 'https://sheets.googleapis.com/v4/spreadsheets'\n\nclass Sheets {\n    constructor() {\n        this.key = null\n    }\n\n    validateKey() {\n        if (this.key === null) {\n            throw Error('Use setKey(key) method to set API key for using Google API first.')\n        }\n    }\n\n    setKey(key) {\n        this.key = key\n    }\n\n    async getContent(docId, sheet, range) {\n        this.validateKey()\n\n        const url = `${URL_BASE}/${docId}/values/${sheet}!${range}?key=${this.key}`\n        const response = await fetch(url)\n        return response.json()\n    }\n\n    async getRanges(docId, ranges) {\n        this.validateKey()\n\n        const rangeParams = ranges.map(r => `ranges=${encodeURI(r)}`).join('&')\n        const url = `${URL_BASE}/${docId}/values:batchGet?${rangeParams}&key=${this.key}`\n        const response = await fetch(url)\n        return response.json()\n    }\n}\n\nexport default new Sheets()"]}]}